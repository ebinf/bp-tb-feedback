// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @unique
  username  String @unique
  full_name String /// @encrypted

  auth_session Session[]
  key          Key[]
  Group        Group[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Term {
  id     Int     @id @unique @default(autoincrement())
  name   String
  active Boolean @default(false)

  groups Group[]
}

model Group {
  id            Int         @id @unique @default(autoincrement())
  number        Int
  name          String
  term_id       Int
  term          Term        @relation(references: [id], fields: [term_id], onDelete: Cascade)
  lead_id       String
  lead          User        @relation(references: [id], fields: [lead_id], onDelete: Cascade)
  feedback_link String?     @unique @default(cuid())
  Feedback      Feedback[]
  PollRound     PollRound[]
}

model Feedback {
  id        Int       @id @unique @default(autoincrement())
  group_id  Int
  group     Group     @relation(references: [id], fields: [group_id], onDelete: Cascade)
  timestamp DateTime  @default(now())
  read      DateTime?
  name      String? /// @encrypted
  feedback  String    @db.Text /// @encrypted
}

model PollRound {
  id        Int      @id @unique @default(autoincrement())
  link      String   @unique @default(cuid())
  group_id  Int
  group     Group    @relation(references: [id], fields: [group_id], onDelete: Cascade)
  created   DateTime @default(now())
  open      Boolean  @default(true)
  autoClose Boolean  @default(false)
  question  String
  votes     Vote[]
}

model Vote {
  id            Int       @id @unique @default(autoincrement())
  poll_round_id Int
  poll_round    PollRound @relation(references: [id], fields: [poll_round_id], onDelete: Cascade)
  vote          Int
  comment       String? /// @encrypted
}
